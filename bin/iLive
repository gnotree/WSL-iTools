#!/usr/bin/env bash
# iLive: live-capture idevicesyslog to ~/Forestry/<ts>/syslog_<ts>.log
# Flags:
#   -v, --verbose          Show logs while recording (tee)
#   -d, --duration <span>  Auto-stop after span (e.g., 30s, 5m, 2h)
#       --zip              Zip the log on exit (fallback tar.gz if no zip)
# Notes:
#   Ctrl-C always stops & finalizes. "--since" is accepted as alias for duration
#   for backward compatibility, but not advertised.

set -euo pipefail

need(){ command -v "$1" >/dev/null 2>&1 || { echo "Missing: $1"; exit 127; }; }
usage(){ cat <<EOF
Usage: iLive [-v|--verbose] [-d|--duration <span>] [--zip]
Examples:
  iLive                    # silent capture until Ctrl-C
  iLive -v                 # show logs while saving
  iLive --duration 10m     # run for 10 minutes, then stop
  iLive -v -d 30s --zip    # show, capture 30s, then zip
EOF
}

to_secs(){
  local s="${1:-}"
  [[ -z "$s" ]] && { echo ""; return 0; }
  if [[ "$s" =~ ^[0-9]+$ ]]; then echo "$s"; return 0; fi
  if [[ "$s" =~ ^([0-9]+)([smhd])$ ]]; then
    local n="${BASH_REMATCH[1]}" u="${BASH_REMATCH[2]}"
    case "$u" in s) echo $((n));;
                  m) echo $((n*60));;
                  h) echo $((n*3600));;
                  d) echo $((n*86400));;
    esac; return 0
  fi
  echo "ERR"
}

VERBOSE=0
DO_ZIP=0
DURATION=""
while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help) usage; exit 0;;
    -v|--verbose) VERBOSE=1; shift;;
    -d|--duration) shift; DURATION="${1:-}"; shift || true;;
    --since)      shift; DURATION="${1:-}"; shift || true;; # legacy alias
    --zip) DO_ZIP=1; shift;;
    *) echo "Unknown option: $1"; usage; exit 2;;
  esac
done

if [[ -n "$DURATION" ]]; then
  SECS="$(to_secs "$DURATION")"
  [[ "$SECS" == "ERR" ]] && { echo "Invalid duration: $DURATION"; exit 2; }
else
  SECS=""
fi

need idevicepair
need idevicesyslog

if ! idevicepair validate >/dev/null 2>&1; then
  echo "Device not paired. Try: idevicepair pair"
  exit 1
fi

ts="$(date +%Y%m%d_%H%M%S)"
outdir="${HOME}/Forestry/${ts}"
mkdir -p "$outdir"
logfile="${outdir}/syslog_${ts}.log"

start_capture(){
  if [[ "$VERBOSE" -eq 1 ]]; then
    echo "[iLive] Recording to: $logfile"
    echo "[iLive] Press Ctrl-C to stopâ€¦"
    set +e; idevicesyslog | tee -a "$logfile" & PID=$!; set -e
  else
    set +e; idevicesyslog >> "$logfile" & PID=$!; set -e
  fi
}

finalize(){
  kill "$PID" 2>/dev/null || true
  wait "$PID" 2>/dev/null || true
  if [[ "$DO_ZIP" -eq 1 ]]; then
    base="$(basename "$logfile" .log)"
    if command -v zip >/dev/null 2>&1; then
      (cd "$outdir" && zip -q "${base}.zip" "${base}.log") || true
      [[ "$VERBOSE" -eq 1 ]] && echo "[iLive] Archive: ${outdir}/${base}.zip"
    else
      (cd "$outdir" && tar -czf "${base}.tar.gz" "${base}.log") || true
      [[ "$VERBOSE" -eq 1 ]] && echo "[iLive] Archive: ${outdir}/${base}.tar.gz"
    fi
  fi
  [[ "$VERBOSE" -eq 1 ]] && echo "[iLive] Saved: $logfile"
  exit 0
}

trap finalize INT TERM
start_capture

if [[ -n "${SECS}" ]]; then
  # auto-stop after duration
  ( sleep "${SECS}"; kill -INT "$PID" 2>/dev/null || true ) &
  WAITER=$!
  wait "$PID" 2>/dev/null || true
  kill "$WAITER" 2>/dev/null || true
  finalize
else
  # wait for Ctrl-C
  wait "$PID" 2>/dev/null || true
  finalize
fi
